searchState.loadedDescShard("rustc_version_runtime", 0, "Simple library for getting the version information of a …\nAn identifier with letters and numbers.\nBeta release channel\nRelease channel of the compiler.\nDevelopment release channel\nAn identifier in the pre-release or build metadata.\nNightly release channel\nAn identifier that’s solely numbers.\nStable release channel\nRepresents a version number conforming to the semantic …\nRustc version plus metada like git short hash and build …\nThe build metadata, ignored when determining version …\nBuild date of the compiler; this was removed between Rust …\nRelease channel of the compiler\nCommit date of the compiler\nGit short hash of the build of the compiler\nReturns the version metadata for <code>cmd</code>, which should be a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHost target triple of the compiler\nIncrements the major version number for this Version (Must …\nIncrements the minor version number for this Version (Must …\nIncrements the patch number for this Version (Must be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks to see if the current Version is in pre-release …\nThe major version, to be incremented on incompatible …\nThe minor version, to be incremented when functionality is …\nContructs the simple case without pre or build.\nParse a string into a semver object.\nThe patch version, to be incremented when …\nThe pre-release version identifier, if one exists.\nVersion of the compiler\nShort version string of the compiler\nReturns the <code>rustc</code> SemVer version.\nCheck wether the <code>rustc</code> version matches the given SemVer …\nReturns the <code>rustc</code> SemVer version and additional metadata …")